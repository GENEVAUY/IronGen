USE sakila;

#1 List the number of films per category.
SELECT film_category.category_id, COUNT(*)
FROM film_category
JOIN film USING (film_id)
GROUP BY film_category.category_id;

#2 Retrieve the store ID, city, and country for each store
SELECT store_id, city, country
FROM store
JOIN address USING (address_id)
JOIN city USING (city_id)
JOIN country USING (country_id);

#3 Calculate the total revenue generated by each store in dollars.

SELECT store.store_id, SUM(payment.amount) AS total_revenue
FROM store
JOIN staff ON store.store_id = staff.store_id
JOIN payment ON staff.staff_id = payment.staff_id
GROUP BY store.store_id;

#another way..

SELECT store.store_id, CONCAT("$",SUM(payment.amount)) AS total_revenue
FROM store
JOIN staff ON store.store_id = staff.store_id
JOIN payment ON staff.staff_id = payment.staff_id
GROUP BY store.store_id;

#4 Determine the average running time of films for each category.
SELECT category_id, category.name AS category_name, AVG(length) AS average_running_time
FROM film_category
JOIN film USING (film_id)
JOIN category USING (category_id)
GROUP BY category_id, category.name;

#5 Identify the film categories with the longest average running time.
SELECT category_id, name, AVG(length) AS average_running_time
FROM film_category
JOIN film USING (film_id)
JOIN category USING (category_id)
GROUP BY category_id, name
ORDER BY average_running_time DESC
LIMIT 3;


#6 Display the top 10 most frequently rented movies in descending order.

SELECT film.film_id, film.title, COUNT(*) AS rental_count
FROM film
JOIN inventory USING (film_id)
JOIN rental USING (inventory_id)
GROUP BY film.film_id, film.title
ORDER BY rental_count DESC
LIMIT 10;

#7Determine if "Academy Dinosaur" can be rented from Store 1.

SELECT IF(COUNT(*) > 0, 'Yes', 'No') AS can_be_rented
FROM film
JOIN inventory USING (film_id)
WHERE film.title LIKE '%Academy Dinosaur%'
  AND inventory.store_id = 1;
